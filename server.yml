Description: >
  Template for services such as Load Balancers, Security Groups, Jumpbox, the required 
  Ubuntu server 18.04
  
Parameters: 
    EnvironmentName: 
         Description: An Environment name that will be prefixed to resources
         Type: String


    EC2AMI:
        Description: The AMI for The EC2 instance
        Type: String 
Resources:
# create an IAM role for S3 Bucket full access
    UdacityS3ReadOnlyEC2:
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Principal: 
                    Service: 
                      - "ec2.amazonaws.com"
                  Action: 
                    - "sts:AssumeRole"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                  
    # Attach an instance profile to the role created
    ServerInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Path: /
          Roles: 
            - !Ref UdacityS3ReadOnlyEC2


################################################ Security Groups#################################################
    LoadBalancerSecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: Allow HTTP only to Load Balancer
            VpcId: !ImportValue OutputVPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
          
    WebServerSecGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId: !ImportValue OutputVPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    
    JumBoxSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow SSH as ingress and keep all ports to internet access
        VpcId: !ImportValue OutputVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0


  ################################################ Web Server Configuration#################################################
  ################################################ Ubuntu Server 18.04 LTS (HVM), SSD Volume Type#################################################
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash  
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              echo "It works! Udagram, Udacity!" > index.html       
          ImageId: !Ref EC2AMI
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t3.small
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
                
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - !ImportValue OutputPrivateSubnet1
          - !ImportValue OutputPrivateSubnet
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '6'
          TargetGroupARNs:
          - Ref: WebServerTargetGroup
      
          
  ################################################# Web Application Target Group#####################################################
    WebServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 120
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !ImportValue OutputVPC

  ################################################Load Balancer######################################################
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          SecurityGroups:
            - !Ref LoadBalancerSecurityGroup
          Subnets:
            - !ImportValue OutputPublicSubnet1
            - !ImportValue OutputPublicSubnet

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        DependsOn: ["LoadBalancer", "WebServerTargetGroup"]
        Properties:
          DefaultActions:
            - Type: forward
              TargetGroupArn: 
                Ref: WebServerTargetGroup
          LoadBalancerArn: 
            Ref: LoadBalancer
          Port: '80'
          Protocol: HTTP

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebServerTargetGroup'
          Conditions:
            - Field: path-pattern
              Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
Outputs:
    LoadBalancer:
      Description: The URL of the ALB. A reference to the created LoadBalancer
      Value: !Join [ "", [ 'http://', !GetAtt LoadBalancer.DNSName ]]
      Export:
        Name: LoadBalancerURL
